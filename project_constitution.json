{
  "project_name": "Ironclad Code Generation System",
  "core_mission": "To automate the generation of high-quality, validated, and test-covered software modules from formal architectural specifications, ensuring determinism and strict adherence to contracts.",
  "architectural_paradigm": "File-based Pipeline Orchestration",
  "primary_language_and_tech_stack": {
    "language": "TypeScript/Node.js",
    "backend_framework": "N/A (CLI Tooling)",
    "frontend_framework": "N/A (CLI Tooling)",
    "database": "File System"
  },
  "key_data_structures": [
    {
      "name": "ModuleContract",
      "description": "A formal JSON-based definition of a single module's interface, dependencies, and generation instructions."
    },
    {
      "name": "FailureReport",
      "description": "A structured JSON report detailing validation errors or generation issues for a module, aggregated for the entire run."
    },
    {
      "name": "InterfaceStub",
      "description": "A TypeScript interface file (*.ts) generated by the IBA, representing the contract surface of a module for type checking."
    },
    {
      "name": "BlueprintLock",
      "description": "A SHA-256 hash header embedded in all blueprint files to verify their integrity."
    },
    {
      "name": "ModuleInstructions",
      "description": "A structured object within a ModuleContract providing detailed, human-readable instructions for the IMG, including an overview, explicit generation steps, and edge cases to consider."
    },
    {
      "name": "FailureEntry",
      "description": "A detailed record of a single failure attempt during a module generation job's retry loop. It includes the validator that failed (e.g., tsc, dsl), a timestamp, and specific error details."
    },
    {
      "name": "FinalFailureReport",
      "description": "A structured report summarizing the permanent failure of a single module after all retry attempts. It contains the module name, total attempts, a summary of the final error, and the hash of the last prompt sent to the IMG."
    },
    {
      "name": "Parameter",
      "description": "Defines a single parameter for a function or a property for a data structure, consisting of a name and a type string. It is a sub-component of FunctionSignature and DataStructure."
    },
    {
      "name": "FunctionSignature",
      "description": "Defines the signature of a single function within a module's public API, including its name, parameters, return type, and an optional description. It is a key component of the ModuleContract."
    },
    {
      "name": "DataStructure",
      "description": "Defines a custom data structure (e.g., an interface or class) that is part of a module's contract, including its name and properties. It is an optional component of the ModuleContract."
    },
    {
      "name": "ValidatorType",
      "description": "A string literal union type ('json-schema' | 'tsc' | 'dsl' | 'edge-case' | 'test-runner') that enumerates the specific validation stages within the generation pipeline, used within a FailureEntry."
    },
    {
      "name": "ModuleContractSpecification",
      "description": "A detailed definition of the `ModuleContract` structure, explicitly adding the following fields identified in Task 1.2: `purpose` (string), `publicAPI` (string[]), `dependencies` (string[]), and `constructorParams` (string[])."
    },
    {
      "name": "AggregatedFailureReport",
      "description": "A type alias for an array of `FinalFailureReport` objects. This structure represents the complete, structured content of the top-level `.ironclad_failures.json` file, as defined in Task 1.2."
    },
    {
      "name": "ModuleContractSchema (Zod)",
      "description": "A schema object defined in TypeScript code using the `zod` library. It provides robust runtime parsing and type inference for the `ModuleContract` data structure, as introduced in Task 1.4, complementing the static JSON Schema definition."
    },
    {
      "name": "AdjacencyList",
      "description": "A type alias for `Map<string, string[]>` representing the directed edges of the module dependency graph. The key is a module name, and the value is an array of its dependencies. Introduced in Task 1.5 to serve as the core data structure within the `DependencyGraph`."
    },
    {
      "name": "DependencyGraph",
      "description": "A class that encapsulates the `AdjacencyList`. It provides a static `build` method to construct the graph from a map of module contracts and includes validation logic to detect unresolved dependencies. Introduced in Task 1.5."
    },
    {
      "name": "CycleError",
      "description": "A custom Error class that extends the base `Error`. It is thrown by the DAG validator and is designed to contain the specific list of module names (the path) that form a dependency cycle, as introduced in Task 1.6."
    },
    {
      "name": "FileWriteMap",
      "description": "A type alias for `Map<string, string | Buffer>` used by the IBA orchestrator. The key is the absolute destination file path, and the value is the file content to be written. This structure aggregates all generated and copied blueprint files before they are written to disk with a `BlueprintLock`, as introduced in Task 1.10."
    },
    {
      "name": "CommandRunResult",
      "description": "A structured object returned by the `runBlueprintCommand` test helper. It contains the `stdout` (string), `stderr` (string), and exit `status` (number | null) of a CLI command execution, used for integration testing. (Derived from Task 1.12, Step 4)."
    },
    {
      "name": "MockProjectConfig",
      "description": "A configuration object passed to the `createMockProject` test helper. It declaratively defines the files and content to be created in a temporary directory for setting up integration test scenarios. (Derived from Task 1.12, Step 10)."
    },
    {
      "name": "GeneratePromptOptions",
      "description": "An interface defining the input options for the prompt constructor. It includes the workspace directory, the path to the main template, the module name, and an optional path to a failure report for prompt amendment during retries. (Derived from Task 2.4, Step 3)."
    },
    {
      "name": "GeneratePromptResult",
      "description": "An interface defining the output of the prompt constructor. It contains the final, rendered prompt content as a string and its corresponding SHA-256 hash. (Derived from Task 2.4, Step 3)."
    },
    {
      "name": "ConcurrencyManager",
      "description": "A generic, reusable class designed to manage a worker pool for concurrent task execution. Its constructor accepts a concurrency limit, an array of task items, and an asynchronous task processor function. It provides a `run()` method that executes all tasks, respecting the concurrency limit and ensuring fault isolation by processing all tasks even if some fail. (Derived from Task 2.5, Step 2)."
    },
    {
      "name": "PromiseSettledResult<T>",
      "description": "A built-in TypeScript type that represents the outcome of a promise, which can be either fulfilled (`{ status: 'fulfilled', value: T }`) or rejected (`{ status: 'rejected', reason: any }`). It is formally adopted as the key data structure for the return value of the `ConcurrencyManager`, ensuring that the status of every individual task is captured. (Derived from the critique in Task 2.5, Step 2)."
    },
    {
      "name": "JobResult",
      "description": "A structured object representing the final outcome of processing a single module within the Task Runner's `processModule` method. It contains the module's name, a status (e.g., 'SUCCESS', 'FAILURE'), and, in the case of failure, the corresponding `FinalFailureReport`. (Derived from Task 2.5, Step 3)."
    },
    {
      "name": "ImgPromptRequest",
      "description": "An interface defining the request body sent to the IMG API, containing the prompt content. Example: `{ prompt: string }`. (Derived from Task 2.7, Step 2)."
    },
    {
      "name": "ImgSuccessResponse",
      "description": "An interface defining the structure of a successful response from the IMG API, containing the generated implementation and test code. Example: `{ implementationCode: string, testCode: string }`. (Derived from Task 2.7, Step 2)."
    },
    {
      "name": "ImgClientConfig",
      "description": "An interface for the IMG client's configuration object, containing the API endpoint URL and the API key. Example: `{ apiUrl: string, apiKey: string }`. (Derived from Task 2.7, Step 2)."
    },
    {
      "name": "ImgConfigError",
      "description": "A custom Error class that extends the base `Error`. It is thrown by the IMG client's configuration loader when required environment variables (e.g., `IMG_API_KEY`) are missing. (Derived from Task 2.7, Step 3)."
    },
    {
      "name": "ImgApiError",
      "description": "A custom Error class that extends the base `Error`. It is thrown by the IMG client when it receives a non-2xx HTTP response from the API. It is designed to store the HTTP status code and response data for detailed error reporting. (Derived from Task 2.7, Step 3)."
    },
    {
      "name": "IntermediateFailureReport",
      "description": "A type alias for an array of `FailureEntry` objects, representing the contents of the `failures.json` file within a single Job's workspace. It tracks all validation failures for a single module across its retry attempts. (Derived from Task 2.8, Step 3)."
    },
    {
      "name": "FailureEntrySchema (Zod)",
      "description": "A schema object defined in TypeScript code using the `zod` library. It provides runtime parsing and type inference for the `FailureEntry` data structure, used when reading and writing the intermediate `failures.json` file. (Derived from Task 2.8, Step 2)."
    },
    {
      "name": "FinalFailureReportSchema (Zod)",
      "description": "A schema object defined in TypeScript code using the `zod` library. It provides runtime parsing and type inference for the `FinalFailureReport` data structure, used when reading and writing the `final_failure.json` file. (Derived from Task 2.8, Step 2)."
    },
    {
      "name": "ValidationResult",
      "description": "An interface representing the outcome of a single validation engine's run. It contains a `success` boolean and an optional array of `ValidationError` objects. (Derived from Task 2.9, Step 1)."
    },
    {
      "name": "ValidationError",
      "description": "An interface for a structured error produced by a validation engine. It includes an optional `file`, `line`, and `column` number, and a required `message` string. (Derived from Task 2.9, Step 1)."
    },
    {
      "name": "ValidationResult (Conflicting Definition)",
      "description": "A conflicting definition of a validation result proposed in Task 2.10, Step 2: `{ validator: string; message: string; details?: any; }`. This structure is inconsistent with the primary `ValidationResult` interface defined in the constitution and should be reconciled."
    },
    {
      "name": "AjvValidatorResult",
      "description": "An ad-hoc interface representing the return value of the `validateModuleContract` function defined in Task 1.3. It has the shape `{ isValid: boolean; errors: any[] | null }` and should be reconciled with the more specific, canonical `ValidationResult` data structure."
    },
    {
      "name": "ValidationFailure (Simplified)",
      "description": "A simplified interface for a failure record proposed in Task 2.8, with properties like `validator`, `message`, and `details`. This conflicts with the more comprehensive, canonical `FailureEntry` data structure and should be reconciled."
    },
    {
      "name": "JobTask",
      "description": "An interface representing the input for a single job process, containing the `moduleName`, the `workspacePath`, and the path to the `jobScriptPath` to be executed. (Derived from Task 2.14, Step 2)."
    },
    {
      "name": "JobProcessOutput",
      "description": "An interface representing the raw output of a single child process execution, containing the `moduleName`, the `exitCode` (number), and the captured `stdout` and `stderr` strings. This is a low-level data structure used by the Task Runner to determine the final, interpreted JobResult. (Derived from the conflicting `JobResult` definition in Task 2.14, Step 2)."
    },
    {
      "name": "FinalFailureReport (Conflicting Definition)",
      "description": "A conflicting definition of the final failure report proposed in Task 2.13, which includes the full array of `ValidationFailure` objects. This contradicts the canonical definition of `FinalFailureReport` as a concise summary."
    },
    {
      "name": "AggregationCategorizationResult",
      "description": "An interface for the return value of the `processJobResults` function, containing two arrays: `successfulModules` (string[]) and `failedModuleWorkspaces` (string[]). (Derived from Task 2.15, Step 3)."
    },
    {
      "name": "ExitCodeTaxonomy",
      "description": "A TypeScript `enum` or constant object that defines the specific, non-zero exit codes for different categories of CLI failures (e.g., input validation, dependency cycle, job failure, global validation failure), as specified in the architecture document's Appendix A.6 and implemented in `src/core/exit-codes.ts`. (Derived from Task 2.18)."
    }
  ],
  "global_dependencies_and_interfaces": [
    {
      "name": "Ironclad Module Generator (IMG) API",
      "version": "External Service",
      "reason": "The core Large Language Model (LLM) service used for generating code and tests."
    },
    {
      "name": "TypeScript Compiler (tsc)",
      "version": "Project-defined",
      "reason": "Essential for static type checking and ensuring generated code conforms to interface contracts."
    },
    {
      "name": "JavaScript Test Runner (e.g., Jest/Mocha)",
      "version": "Project-defined",
      "reason": "Required for executing generated unit tests as part of the validation sequence."
    },
    {
      "name": "Git",
      "version": "System-provided",
      "reason": "Manages versioning of all specifications, contracts, and generated code."
    },
    {
      "name": "@types/node",
      "version": "Project-defined",
      "reason": "Provides TypeScript type definitions for the Node.js runtime, essential for type safety in a TypeScript/Node.js project."
    },
    {
      "name": "Commander.js",
      "version": "Project-defined",
      "reason": "A library for building the command-line interface, chosen to parse arguments and define the `blueprint` and `generate` commands."
    },
    {
      "name": "ts-node",
      "version": "Project-defined",
      "reason": "A development tool to execute TypeScript files directly, streamlining the development workflow by avoiding a separate compilation step during development."
    },
    {
      "name": "JSON Schema Validator (e.g., ajv)",
      "version": "Project-defined",
      "reason": "Required for validating the structure of `ModuleContract` JSON files against a formal schema, as implied by Task 1.3 and the 'json-schema' validator type."
    },
    {
      "name": "ts-jest",
      "version": "Project-defined",
      "reason": "A TypeScript preprocessor for Jest, required to execute tests written in TypeScript, directly supporting the integration of the chosen tech stack (TypeScript) and test runner (Jest)."
    },
    {
      "name": "@types/jest",
      "version": "Project-defined",
      "reason": "Provides TypeScript type definitions for the Jest testing framework, essential for type safety when writing unit and integration tests."
    },
    {
      "name": "zod",
      "version": "Project-defined",
      "reason": "A TypeScript-first schema declaration and validation library, introduced in Task 1.4 for robust runtime parsing and type inference of ModuleContract data."
    },
    {
      "name": "remark",
      "version": "Project-defined",
      "reason": "A powerful Markdown processor required to parse the `ARCHITECTURE_SPEC.md` file into an Abstract Syntax Tree (AST), as specified in Task 1.4."
    },
    {
      "name": "remark-parse",
      "version": "Project-defined",
      "reason": "A plugin for `remark` that handles the conversion of a Markdown string into a syntax tree, essential for the `ARCHITECTURE_SPEC.md` parser."
    },
    {
      "name": "unist-util-visit",
      "version": "Project-defined",
      "reason": "A utility for traversing the `unist` (Universal Syntax Tree) generated by `remark`, necessary for extracting specific information like the module list from the parsed `ARCHITECTURE_SPEC.md`."
    },
    {
      "name": "Yarn",
      "version": "System-provided",
      "reason": "An alternative package manager to npm, mentioned as an option for installing dependencies in Task 1.4."
    },
    {
      "name": "Prettier",
      "version": "Project-defined",
      "reason": "A code formatter used to ensure all generated TypeScript code (e.g., interface stubs) adheres to a consistent style, supporting the 'high-quality' output goal as identified in the critique of Task 1.7."
    },
    {
      "name": "Node.js Crypto Module",
      "version": "System-provided (Node.js built-in)",
      "reason": "Required for SHA-256 hashing to implement the `BlueprintLock` integrity check mechanism, as introduced in Task 1.8."
    },
    {
      "name": "Jest",
      "version": "Project-defined",
      "reason": "The chosen test runner for unit and integration testing, as implied by the use of `ts-jest` and the repeated specification in test-related tasks (e.g., Task 1.3, 1.4, 1.6)."
    },
    {
      "name": "mock-fs",
      "version": "Project-defined",
      "reason": "A development dependency used to mock the file system during testing of file I/O operations, such as the repository scaffolder in Task 1.9, avoiding actual disk writes."
    },
    {
      "name": "@types/mock-fs",
      "version": "Project-defined",
      "reason": "Provides TypeScript type definitions for the `mock-fs` library, ensuring type safety in tests that mock the file system."
    },
    {
      "name": "npm",
      "version": "System-provided",
      "reason": "The primary package manager for Node.js, used for initializing the project (`npm init`) and managing dependencies (`npm install`) as shown in Task 1.1. The constitution lists Yarn as an alternative, implying npm is a core tool that should be formally listed."
    },
    {
      "name": "tmp-promise",
      "version": "Project-defined",
      "reason": "A library for managing temporary directories and files in Node.js, required for isolated integration testing of file system operations as specified in Task 1.12."
    },
    {
      "name": "fs-extra",
      "version": "Project-defined",
      "reason": "Provides enhanced file system methods (like `pathExists`, `copy`) that simplify file system assertions in integration tests, as required by Task 1.12."
    },
    {
      "name": "chalk",
      "version": "Project-defined",
      "reason": "Required for producing colored console output (e.g., for user-friendly error messages) to improve the CLI's user experience, as specified in Task 2.1, Step 5."
    },
    {
      "name": "Node.js child_process Module",
      "version": "System-provided (Node.js built-in)",
      "reason": "Required for executing the main CLI entry point as a subprocess during integration testing, as specified in the test helper function in Task 1.12, Step 4."
    },
    {
      "name": "Node.js fs/promises Module",
      "version": "System-provided (Node.js built-in)",
      "reason": "Required for performing asynchronous file system operations, such as reading directories to discover module contracts, as specified in Task 2.2, Step 3."
    },
    {
      "name": "Node.js path Module",
      "version": "System-provided (Node.js built-in)",
      "reason": "Required for robust handling and construction of file paths across different operating systems, essential for both the `generate` and `blueprint` commands, as specified in Task 2.2, Step 3."
    },
    {
      "name": "handlebars",
      "version": "Project-defined",
      "reason": "Required for populating prompt templates with dynamic data using logic-less templates, as specified by the template syntax in the architecture document and the implementation in Task 2.4."
    },
    {
      "name": "axios",
      "version": "Project-defined",
      "reason": "Required for making HTTP POST requests to the external Ironclad Module Generator (IMG) API, as specified in Task 2.7."
    },
    {
      "name": "dotenv",
      "version": "Project-defined",
      "reason": "Required for loading environment variables from a `.env` file during local development, specifically for securely handling the `IMG_API_KEY` as specified in Task 2.7."
    },
    {
      "name": "nock",
      "version": "Project-defined",
      "reason": "A development dependency required for mocking HTTP requests to the external IMG API during integration testing, ensuring tests are isolated and deterministic, as specified in Task 2.7."
    },
    {
      "name": "@types/nock",
      "version": "Project-defined",
      "reason": "Provides TypeScript type definitions for the `nock` library, ensuring type safety in tests that mock the IMG API."
    },
    {
      "name": "ESLint",
      "version": "Project-defined",
      "reason": "A linter for TypeScript code, required to enforce coding standards and catch common errors, as mentioned in Task 2.10, Step 8."
    },
    {
      "name": "p-limit",
      "version": "Project-defined",
      "reason": "A library suggested in Task 2.5, Step 5 as an alternative for implementing the concurrency management pattern in the Task Runner, handling a pool of promises efficiently."
    },
    {
      "name": "Node.js os Module",
      "version": "System-provided (Node.js built-in)",
      "reason": "Required for the Task Runner to determine the number of CPU cores as a potential default for the concurrency limit, as suggested in Task 2.14, Step 4."
    },
    {
      "name": "express",
      "version": "Project-defined",
      "reason": "A web framework required for creating a mock IMG server for use in automated end-to-end tests, isolating tests from the real external API. (Derived from Task 2.19)."
    }
  ],
  "non_functional_requirements": [
    {
      "requirement": "Reliability (Determinism)",
      "constraint": "Given the same inputs (specs, contracts, context, templates, IMG version), the system must produce byte-for-byte identical outputs."
    },
    {
      "requirement": "Reliability (Fault Isolation)",
      "constraint": "Failure in one module's generation job must not halt the processing of other independent modules."
    },
    {
      "requirement": "Security",
      "constraint": "The external IMG API key must be handled securely via environment variables or a secrets manager, never stored in version control."
    },
    {
      "requirement": "Auditability",
      "constraint": "The BlueprintLock integrity hash on all blueprint files must be verifiable to prevent tampering."
    },
    {
      "requirement": "Scalability",
      "constraint": "The system must support parallel generation of independent modules, configurable via the IRONCLAD_MAX_PARALLEL environment variable."
    },
    {
      "requirement": "Maintainability",
      "constraint": "All system components must have clear responsibilities and well-defined interfaces to minimize coupling."
    },
    {
      "requirement": "Auditability (Prompt Integrity)",
      "constraint": "The SHA-256 hash of the final prompt sent to the IMG for any failed generation job must be recorded in the failure report for debugging, reproducibility, and auditing purposes."
    },
    {
      "requirement": "Reliability (Input Integrity)",
      "constraint": "The system must perform strict validation on primary input files like `ARCHITECTURE_SPEC.md`. A failure to find required structural elements (e.g., a 'Modules' section) must be treated as a fatal error that halts the entire process, as implied by the critique in Task 1.4."
    },
    {
      "requirement": "Reliability (Fail-Fast)",
      "constraint": "Critical input validation failures, such as a missing 'Modules' section in ARCHITECTURE_SPEC.md or unresolved module dependencies, must cause the process to terminate immediately and report a fatal error, as implied in Tasks 1.4 and 1.5."
    },
    {
      "requirement": "Interoperability (CLI Exit Codes)",
      "constraint": "The CLI must terminate with a non-zero exit code upon encountering a critical blueprint failure, such as a dependency cycle, to facilitate integration with scripting and CI/CD pipelines, as specified in Task 1.6."
    },
    {
      "requirement": "API Contract (Asynchronicity)",
      "constraint": "All methods generated in module interface stubs (e.g., I<ModuleName>.ts) must return a Promise, ensuring a consistent asynchronous API contract across all modules, as specified in the interface generation logic of Task 1.7."
    },
    {
      "requirement": "Reliability (Specific Error Handling)",
      "constraint": "In case of validation or parsing failures (e.g., file-not-found, invalid JSON, unresolved dependency), the system must throw specific, informative errors that clearly identify the source and nature of the problem, as required in the implementation details of Tasks 1.4 and 1.5."
    },
    {
      "requirement": "Maintainability (Code Style Consistency)",
      "constraint": "All generated TypeScript source code must be formatted by an automated tool (e.g., Prettier) to ensure a consistent style, enhancing readability and directly supporting the 'high-quality' output goal mentioned in the critique of Task 1.7."
    },
    {
      "requirement": "Reliability (Idempotency)",
      "constraint": "Core scaffolding operations, such as the directory creation performed by the `scaffoldRepository` function, must be idempotent. The system should not throw an error or fail if it is run multiple times on a target that is already partially or fully scaffolded, as required by the test case in Task 1.9."
    },
    {
      "requirement": "Reliability (BlueprintLock Verifiability)",
      "constraint": "The hashing algorithm used for `BlueprintLock` must be self-consistent. The process of verifying a file with a lock (`verifyBlueprintLock`) must succeed if the input is the direct output of the lock-adding process (`addBlueprintLock`), ensuring `verify(add(content))` is always true. The verification hash must be calculated on the full file content, including the header containing the expected hash, as implied by the critique in Task 1.8."
    },
    {
      "requirement": "Interoperability (Specific Exit Codes)",
      "constraint": "The CLI must use a taxonomy of specific, non-zero exit codes for different categories of failures (e.g., input validation error, dependency cycle, file system error). A generic exit code of '1' is insufficient and deviates from the more sophisticated requirements for CI/CD integration, as noted in the critique of Task 1.10."
    },
    {
      "requirement": "Testability (Code Coverage)",
      "constraint": "The testing framework must be configured to collect and report code coverage metrics. This is required to ensure a high level of testability and adherence to the project's quality standards, as implied by the critique of the basic Jest configuration in Task 1.11, which noted the omission of coverage settings."
    },
    {
      "requirement": "Testability (Test Isolation)",
      "constraint": "Integration tests that perform file system I/O must execute in isolated, temporary directories that are created before the test and cleaned up after, to prevent side effects between tests. (Derived from Task 1.12, Step 3)."
    },
    {
      "requirement": "Reliability (BlueprintLock Verification Logic)",
      "constraint": "The `verifyBlueprintLock` function must operate by: 1. Extracting the hash from the header line. 2. Stripping the header line from the file content. 3. Calculating the SHA-256 hash of the *remaining* content. 4. Comparing the extracted hash with the calculated hash. This clarifies the verification process and corrects the flawed premise of hashing the entire file including its own header. (Derived from the critique in Task 1.12, Step 7)."
    },
    {
      "requirement": "User Experience (CLI Output)",
      "constraint": "The CLI must use colored output (e.g., via `chalk`) to distinguish between informational messages, warnings, and errors, improving readability and user experience. (Derived from Task 2.1, Step 5)."
    },
    {
      "requirement": "Reliability (Configuration Graceful Degradation)",
      "constraint": "When parsing configuration values like environment variables (e.g., `IRONCLAD_MAX_PARALLEL`), the system must handle invalid or out-of-range inputs gracefully by logging a warning and falling back to a safe, documented default value, rather than failing. (Derived from Task 2.1, Step 6)."
    },
    {
      "requirement": "Reliability (Input Path Validation)",
      "constraint": "The `generate run` command must perform strict validation on its `<repository-path>` argument, ensuring the path exists and is a directory before proceeding. Failure must result in a user-friendly error and a specific non-zero exit code as per the system's exit code taxonomy. (Derived from Task 2.1, Step 5)."
    },
    {
      "requirement": "Developer Experience (Workflow Efficiency)",
      "constraint": "The development setup should support rapid iteration by avoiding a full, blocking recompilation step on every code change, for instance by utilizing a tool like `ts-node` for a 'dev' script. (Derived from the critique in Task 1.1, Step 9)."
    },
    {
      "requirement": "Reliability (Verification Robustness)",
      "constraint": "Verification logic, such as for the `BlueprintLock`, must be tested against negative scenarios including tampered content and content missing the expected markers, not just positive round-trip scenarios. (Derived from the critique in Task 1.8, Step 5)."
    },
    {
      "requirement": "Maintainability (Tooling Consistency)",
      "constraint": "The project must maintain consistency in its choice of libraries for common tasks (e.g., using `mock-fs` for all file system mocking) to avoid architectural drift and reduce cognitive overhead for developers. (Derived from the critique in Task 2.2, Step 8)."
    },
    {
      "requirement": "Reliability (Prompt Determinism and Parsability)",
      "constraint": "When consolidating multiple source files (e.g., IDL files) into a single string for an IMG prompt, each consolidated file's content must be preceded by a deterministic, machine-parsable header (e.g., `// --- File: <filename> ---`) to provide clear context to the LLM and ensure byte-for-byte identical prompts for the same inputs. (Derived from the critique in Task 2.4, Step 5)."
    },
    {
      "requirement": "Observability (Structured Logging)",
      "constraint": "The system must support structured (JSON) logging in addition to human-readable console output. This is required for machine-readability and integration with log analysis tools, fulfilling the observability requirements of the system. (Derived from the critique in Task 2.5, Step 4)."
    },
    {
      "requirement": "Reliability (Job Outcome Atomicity)",
      "constraint": "The Job worker process must be designed to be atomic in its outcome reporting. In the event of any failure, including unexpected crashes or exceptions, it must make a best effort to write a `final_failure.json` file to its workspace before terminating. A Job process must not terminate without producing either the expected generated files on success or a failure report on failure. (Derived from critique in Task 2.6, Step 8)."
    },
    {
      "requirement": "Reliability (Test Coverage Enforcement)",
      "constraint": "The test runner validation engine must be configured to fail if no tests are found in a generated test file (e.g., by setting `passWithNoTests: false` in Jest). This ensures that a failure by the IMG to produce any tests is caught as a validation error. (Derived from the critique in Task 2.10, Step 4)."
    },
    {
      "requirement": "Reliability (Overwrite Protection)",
      "constraint": "The system must check if a destination file (e.g., `src/modules/<ModuleName>.ts`) exists and is not a stub before copying/merging generated code. An attempt to overwrite a non-stub, user-modified file must result in a specific failure, as implied by the exit code taxonomy. (Derived from critique in Task 2.15, Step 4)."
    },
    {
      "requirement": "Reliability (Post-Merge Validation)",
      "constraint": "After merging all successful module outputs, the Task Runner must perform a final, global validation step (e.g., a full project `tsc --noEmit`) to ensure the integrated system is valid before declaring final success for the entire run. (Derived from critique in Task 2.15, Step 6)."
    },
    {
      "requirement": "Reliability (Signal Handling)",
      "constraint": "The Task Runner must be able to correctly handle and report on Job processes that terminate unexpectedly due to a system signal (e.g., SIGKILL, SIGTERM), not just those that exit with a non-zero code. Such terminations must be treated as job failures. (Derived from the critique in Task 2.14, Step 8)."
    }
  ],
  "project_file_map": {
    "contracts": {
      "type": "directory",
      "description": "Contains all module contract JSON files.",
      "children": {
        "<ModuleName>.json": {
          "type": "file",
          "description": "The formal contract for a single module."
        }
      }
    },
    "idl": {
      "type": "directory",
      "description": "Contains shared Interface Definition Language files (e.g., TypeScript types).",
      "children": {
        "*.ts": {
          "type": "file",
          "description": "Shared data structures (types, enums, interfaces)."
        },
        "index.ts": {
          "type": "file",
          "description": "A barrel file that exports all shared types from the `idl` directory, simplifying import statements in generated code, as assumed in Task 1.7."
        }
      }
    },
    "prompt_templates": {
      "type": "directory",
      "description": "Contains templates for constructing prompts sent to the IMG.",
      "children": {
        "*.tmpl": {
          "type": "file",
          "description": "A single prompt template."
        }
      }
    },
    "src": {
      "type": "directory",
      "description": "Contains all generated source code.",
      "children": {
        "modules": {
          "type": "directory",
          "description": "Contains module interface stubs and generated implementations.",
          "children": {
            "__tests__": {
              "type": "directory",
              "description": "Contains generated unit tests for modules.",
              "children": {
                "<ModuleName>.test.ts": {
                  "type": "file",
                  "description": "Generated unit tests for a module."
                }
              }
            },
            "I<ModuleName>.ts": {
              "type": "file",
              "description": "The TypeScript interface stub for a module, generated by the IBA."
            },
            "<ModuleName>.ts": {
              "type": "file",
              "description": "The generated implementation code for a module."
            }
          }
        },
        "index.ts": {
          "type": "file",
          "description": "The primary CLI entry point for the application, responsible for parsing commands and arguments using the Commander.js library."
        },
        "core": {
          "type": "directory",
          "description": "Contains core type definitions and non-generated logic for the Ironclad tool itself.",
          "children": {
            "types.ts": {
              "type": "file",
              "description": "Defines the core TypeScript types and interfaces for the system, such as ModuleContract and FailureReport variants."
            },
            "job.ts": {
              "type": "file",
              "description": "Contains the entry point and logic for a single module generation job, which is executed as a separate process by the Task Runner. (Derived from Task 2.6, Step 2)."
            },
            "job.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the Job worker script, mocking its external dependencies like the file system and process arguments. (Derived from Task 2.6, Step 9)."
            },
            "exit-codes.ts": {
              "type": "file",
              "description": "Defines the exit code enum/constants and provides a utility function to map error types to specific exit codes, implementing the taxonomy from the architecture specification. (Derived from Task 2.18)."
            },
            "exit-codes.test.ts": {
              "type": "file",
              "description": "Unit tests for the exit code mapping logic. (Derived from Task 2.18)."
            }
          }
        },
        "iba": {
          "type": "directory",
          "description": "Contains source code for the Ironclad Blueprint Architect (IBA) component.",
          "children": {
            "validators": {
              "type": "directory",
              "description": "Contains validation logic for contracts and other blueprint artifacts.",
              "children": {
                "contractValidator.ts": {
                  "type": "file",
                  "description": "Implements the JSON schema validation logic for ModuleContract files."
                },
                "contractValidator.test.ts": {
                  "type": "file",
                  "description": "Unit tests for the ModuleContract validator."
                },
                "graph-validator.ts": {
                  "type": "file",
                  "description": "Implements the Directed Acyclic Graph (DAG) validation logic, including cycle detection, for the module dependency graph, as introduced in Task 1.6."
                },
                "graph-validator.test.ts": {
                  "type": "file",
                  "description": "Unit tests for the DAG validation logic, covering various cycle scenarios and valid graph structures, as introduced in Task 1.6."
                }
              }
            },
            "parsers.ts": {
              "type": "file",
              "description": "Implements file parsing logic for `ARCHITECTURE_SPEC.md` and `ModuleContract` JSON files using libraries like remark and zod."
            },
            "parsers.test.ts": {
              "type": "file",
              "description": "Unit tests for the file parsers implemented in `parsers.ts`."
            },
            "types.ts": {
              "type": "file",
              "description": "A file proposed in Task 1.4 to house type definitions and Zod schemas for the IBA. Note: This placement conflicts with the constitution's definition of `src/core/types.ts` for core types and `src/schemas` for schema definitions."
            },
            "dependency-graph.ts": {
              "type": "file",
              "description": "Implements the DependencyGraph class and related logic for constructing and validating the module dependency graph, as specified in Task 1.5."
            },
            "dependency-graph.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the DependencyGraph logic, as specified in Task 1.5."
            },
            "index.ts": {
              "type": "file",
              "description": "The primary orchestrator file for the IBA component, responsible for sequencing the parsing, validation, and file generation steps, as implied by Task 1.6."
            },
            "interface-generator.ts": {
              "type": "file",
              "description": "Contains the logic for generating TypeScript interface stubs from ModuleContract data, as introduced in Task 1.7."
            },
            "interface-generator.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the interface stub generation logic, as introduced in Task 1.7."
            },
            "scaffolder.ts": {
              "type": "file",
              "description": "Contains the logic for creating the initial repository directory structure (e.g., `contracts`, `src/modules`), as specified in Task 1.9."
            },
            "scaffolder.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the repository scaffolding logic, using `mock-fs` to validate directory creation, as specified in Task 1.9."
            },
            "graph.ts": {
              "type": "file",
              "description": "A new file proposed in Task 1.11 to refactor and consolidate dependency graph construction and DAG cycle detection logic for improved testability. Note: This conflicts with the existing, more granular files `dependency-graph.ts` and `validators/graph-validator.ts`."
            },
            "graph.test.ts": {
              "type": "file",
              "description": "A new unit test file proposed in Task 1.11 to test the consolidated graph logic from `graph.ts`."
            },
            "validation.ts": {
              "type": "file",
              "description": "A new file proposed in Task 1.11 to refactor and consolidate `ModuleContract` validation logic. Note: This conflicts with the existing `validators/contractValidator.ts`."
            },
            "validation.test.ts": {
              "type": "file",
              "description": "A new unit test file proposed in Task 1.11 to test the consolidated validation logic from `validation.ts`."
            },
            "graph-validator.ts": {
              "type": "file",
              "description": "A file proposed in Task 1.6 to house dependency graph validation logic. Note: This path conflicts with the established `src/iba/validators/graph-validator.ts` and represents an architectural inconsistency."
            },
            "graph-validator.test.ts": {
              "type": "file",
              "description": "A test file proposed in Task 1.6 for the `graph-validator.ts` logic. Note: This path conflicts with the established test location for graph validation."
            }
          }
        },
        "schemas": {
          "type": "directory",
          "description": "Contains formal schema definitions used for validation.",
          "children": {
            "moduleContract.schema.ts": {
              "type": "file",
              "description": "Defines the JSON Schema for the ModuleContract data structure."
            }
          }
        },
        "utils": {
          "type": "directory",
          "description": "A new directory proposed in Task 1.8 to house general utility functions. Note: The constitution designates `src/core` for non-generated tool logic, and this new path represents a potential architectural conflict or refinement.",
          "children": {
            "blueprintLock.ts": {
              "type": "file",
              "description": "Contains the hashing and verification logic for the BlueprintLock mechanism, as specified in Task 1.8."
            },
            "blueprintLock.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the BlueprintLock hashing and verification logic, as specified in Task 1.8."
            }
          }
        },
        "cli.ts": {
          "type": "file",
          "description": "A new CLI entry point proposed in Task 1.10, intended to replace or supplement `src/index.ts`. It is responsible for instantiating the main `commander` program."
        },
        "commands": {
          "type": "directory",
          "description": "A new directory proposed in Task 1.10 to modularize CLI command logic, with each file defining a subcommand.",
          "children": {
            "blueprint.ts": {
              "type": "file",
              "description": "Contains the logic for the `blueprint` command and its `build` subcommand, including argument/option parsing and orchestrating the IBA workflow, as defined in Task 1.10."
            },
            "__tests__": {
              "type": "directory",
              "description": "Contains integration tests for the CLI commands, co-located with the command source code.",
              "children": {
                "blueprint.integration.test.ts": {
                  "type": "file",
                  "description": "Contains integration tests for the `ironclad blueprint build` command, as specified in Task 1.12."
                }
              }
            },
            "generate.ts": {
              "type": "file",
              "description": "Contains the logic for the `generate` command and its `run` subcommand, as specified in Task 2.1."
            },
            "generate.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the helper functions within `generate.ts`, as specified in Task 2.1. Note: The constitution's testing pattern suggests a path like `src/commands/__tests__/generate.unit.test.ts` for better organization."
            }
          }
        },
        "task-runner": {
          "type": "directory",
          "description": "A new directory to house the logic for the Task Runner component, as introduced in Task 2.2.",
          "children": {
            "module-discovery.ts": {
              "type": "file",
              "description": "Contains the logic for discovering module contracts, as specified in Task 2.2."
            },
            "module-discovery.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the module discovery logic, as specified in Task 2.2."
            },
            "workspace-manager.ts": {
              "type": "file",
              "description": "Contains the logic for the Task Runner's workspace manager, including creating and populating isolated job directories, as specified in Task 2.3."
            },
            "workspace-manager.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the workspace manager logic, using `mock-fs` to validate directory and symlink creation, as specified in Task 2.3."
            },
            "prompt-constructor.ts": {
              "type": "file",
              "description": "Contains the logic for constructing prompts from templates and context files, as specified in Task 2.4."
            },
            "prompt-constructor.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the prompt constructor logic, as specified in Task 2.4."
            },
            "job-runner.ts": {
              "type": "file",
              "description": "A module responsible for managing the lifecycle of all module generation jobs, including spawning and monitoring child processes. (Derived from Task 2.14, Step 1)."
            },
            "job-runner.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the `job-runner.ts` module, mocking the `child_process` module. (Derived from Task 2.14, Step 1)."
            },
            "results-aggregator.ts": {
              "type": "file",
              "description": "Contains the logic for processing the array of JobResults, determining success/failure, merging successful code, and collating failures. (Derived from Task 2.15, Step 2)."
            },
            "results-aggregator.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the results aggregation logic, using mock-fs to simulate job workspaces. (Derived from Task 2.15, Step 7)."
            },
            "global-validator.ts": {
              "type": "file",
              "description": "Contains logic for running global validation checks (e.g., a full project `tsc --noEmit`) after all successful modules have been merged into the main repository. (Derived from Task 2.17)."
            },
            "global-validator.test.ts": {
              "type": "file",
              "description": "Unit tests for the global validator logic. (Derived from Task 2.17)."
            },
            "task-runner.integration.test.ts": {
              "type": "file",
              "description": "High-level integration tests for the Task Runner, verifying the end-to-end flow from module discovery to results aggregation, using mocked Job processes. (Derived from Task 2.20)."
            }
          }
        },
        "types": {
          "type": "directory",
          "description": "A new directory proposed in Task 2.3 for type definitions, which conflicts with the established `src/core/types.ts` location.",
          "children": {
            "contract.ts": {
              "type": "file",
              "description": "A file proposed in Task 2.3 to define the `ModuleContract` interface. Note: This path conflicts with the constitution's established `src/core/types.ts` for core type definitions."
            }
          }
        },
        "lib": {
          "type": "directory",
          "description": "A new directory for generic, reusable library code that is not specific to a single component like IBA or Task Runner, as proposed in Task 2.5. Note: This represents a new architectural pattern not previously defined in the constitution.",
          "children": {
            "ConcurrencyManager.ts": {
              "type": "file",
              "description": "Contains the implementation of the generic `ConcurrencyManager` class for handling the worker pool and concurrent task execution. (Derived from Task 2.5, Step 2)."
            },
            "ConcurrencyManager.test.ts": {
              "type": "file",
              "description": "Contains unit tests for the `ConcurrencyManager` class, verifying throttling, parallelism, and fault isolation. (Derived from Task 2.5, Step 5)."
            }
          }
        },
        "img": {
          "type": "directory",
          "description": "A new directory to house all components related to the Ironclad Module Generator (IMG) client, as specified in Task 2.7.",
          "children": {
            "index.ts": {
              "type": "file",
              "description": "A barrel file that exports the public interface of the IMG client module, including the `callImg` function and relevant types. (Derived from Task 2.7, Step 11)."
            },
            "img.client.ts": {
              "type": "file",
              "description": "Contains the main IMG client logic, including the `callImg` function for making API requests. (Derived from Task 2.7, Step 5)."
            },
            "img.client.test.ts": {
              "type": "file",
              "description": "Contains unit and integration tests for the IMG client, using `nock` to mock API responses. (Derived from Task 2.7, Step 7)."
            },
            "img.config.ts": {
              "type": "file",
              "description": "Contains the logic for loading and validating the IMG client's configuration from environment variables. (Derived from Task 2.7, Step 4)."
            },
            "img.errors.ts": {
              "type": "file",
              "description": "Defines custom error classes (`ImgConfigError`, `ImgApiError`) for the IMG client. (Derived from Task 2.7, Step 3)."
            },
            "img.types.ts": {
              "type": "file",
              "description": "Defines the TypeScript interfaces for the IMG client's request, response, and configuration data structures. (Derived from Task 2.7, Step 2)."
            }
          }
        },
        "validation": {
          "type": "directory",
          "description": "A new directory for housing validation engines that are run by the Job worker process. (Derived from Task 2.9, Step 1).",
          "children": {
            "engines": {
              "type": "directory",
              "description": "Contains the implementation for each specific validation engine. (Derived from Task 2.9, Step 1).",
              "children": {
                "tscValidator.ts": {
                  "type": "file",
                  "description": "Implements the validation engine that runs the TypeScript compiler (`tsc`) against the generated code in an isolated job workspace. (Derived from Task 2.9, Step 1)."
                },
                "tscValidator.test.ts": {
                  "type": "file",
                  "description": "A unit test file for the `tscValidator` engine, as specified in Task 2.9, Step 5."
                }
              }
            },
            "types.ts": {
              "type": "file",
              "description": "Defines shared TypeScript types for the validation components, such as `ValidationResult` and `ValidationError`. (Derived from Task 2.9, Step 1)."
            },
            "__tests__": {
              "type": "directory",
              "description": "A new directory proposed in Task 2.10, Step 7 for housing tests for validation engines, which conflicts with the co-location pattern seen elsewhere in the project.",
              "children": {
                "testRunnerEngine.test.ts": {
                  "type": "file",
                  "description": "Contains unit tests for the test runner validation engine, as specified in Task 2.10, Step 7."
                }
              }
            },
            "testRunnerEngine.ts": {
              "type": "file",
              "description": "Implements the test runner validation engine using a programmatic API for a test framework like Jest, as specified in Task 2.10, Step 3."
            },
            "edgeCaseValidator.ts": {
              "type": "file",
              "description": "A file proposed in Task 2.11 to contain the logic for the edge case string check validator. Note: This path conflicts with the established pattern of placing engines in `src/validation/engines/`."
            },
            "edgeCaseValidator.test.ts": {
              "type": "file",
              "description": "A unit test file proposed in Task 2.11 for the edge case validator. Note: This path conflicts with the established test co-location pattern."
            }
          }
        },
        "prompt-constructor.ts": {
          "type": "file",
          "description": "A file proposed in Task 2.4 to encapsulate prompt generation logic. Note: This top-level placement conflicts with the established `src/task-runner/prompt-constructor.ts` path, which co-locates it with its parent component."
        },
        "prompt-constructor.test.ts": {
          "type": "file",
          "description": "A test file proposed in Task 2.4 for the prompt constructor. Note: This path conflicts with the established test location for the Task Runner's prompt constructor."
        },
        "job": {
          "type": "directory",
          "description": "A new directory proposed in the reasoning tree to contain Job-specific logic, which conflicts with the constitutional pattern of placing Job logic in `src/core/job.ts`. (Derived from Tasks 2.12 and 2.13).",
          "children": {
            "failure-types.ts": {
              "type": "file",
              "description": "A file proposed to contain failure-related data structures, which conflicts with the canonical definitions in `src/core/types.ts`. (Derived from Task 2.13, Step 1)."
            },
            "FailureReporter.ts": {
              "type": "file",
              "description": "A class proposed to be responsible for all file-based failure logging within a Job's workspace. (Derived from Task 2.13, Step 2)."
            },
            "FailureReporter.test.ts": {
              "type": "file",
              "description": "Unit tests for the `FailureReporter` class. (Derived from Task 2.13, Step 5)."
            },
            "validation": {
              "type": "directory",
              "description": "A directory proposed to house validation logic specific to the Job, which conflicts with the established top-level `src/validation/` directory. (Derived from Task 2.12, Step 1).",
              "children": {
                "types.ts": {
                  "type": "file",
                  "description": "A file proposed to hold validation-related types, conflicting with the established `src/validation/types.ts`. (Derived from Task 2.12, Step 1)."
                },
                "orchestrator.ts": {
                  "type": "file",
                  "description": "Contains the logic for the validation sequence orchestrator. (Derived from Task 2.12, Step 3)."
                },
                "orchestrator.test.ts": {
                  "type": "file",
                  "description": "Unit tests for the validation orchestrator. (Derived from Task 2.12, Step 11)."
                },
                "schemaValidator.ts": {
                  "type": "file",
                  "description": "Stub file for the schema validator. (Derived from Task 2.12, Step 4)."
                },
                "tscValidator.ts": {
                  "type": "file",
                  "description": "Stub file for the TSC validator. (Derived from Task 2.12, Step 4)."
                },
                "dslValidator.ts": {
                  "type": "file",
                  "description": "Stub file for the DSL validator. (Derived from Task 2.12, Step 4)."
                },
                "edgeCaseValidator.ts": {
                  "type": "file",
                  "description": "Stub file for the edge case validator. (Derived from Task 2.12, Step 4)."
                },
                "testRunnerValidator.ts": {
                  "type": "file",
                  "description": "Stub file for the test runner validator. (Derived from Task 2.12, Step 4)."
                }
              }
            }
          }
        }
      }
    },
    ".tmp": {
      "type": "directory",
      "description": "Contains temporary files and workspaces for the generation process.",
      "children": {
        "ironclad_tasks": {
          "type": "directory",
          "description": "Contains isolated workspaces for each module generation Job.",
          "children": {
            "<ModuleName>": {
              "type": "directory",
              "description": "The isolated workspace for a single module generation Job. It is populated by the Task Runner with symlinks to necessary blueprint files and serves as the current working directory for the Job process. (Derived from Task 2.3).",
              "children": {
                "contracts": {
                  "type": "directory",
                  "description": "Contains symlinks to the primary module's contract and all of its dependency contracts. (Derived from Task 2.3)."
                },
                "idl": {
                  "type": "directory",
                  "description": "A symlink to the main repository's `idl` directory. (Derived from Task 2.3)."
                },
                "prompt_templates": {
                  "type": "directory",
                  "description": "A symlink to the main repository's `prompt_templates` directory. (Derived from Task 2.3)."
                },
                "src": {
                  "type": "directory",
                  "description": "Contains symlinks to interface stubs and will be the destination for generated code. (Derived from Task 2.3).",
                  "children": {
                    "modules": {
                      "type": "directory",
                      "description": "Contains symlinks to the primary module's interface stub and all of its dependency stubs. (Derived from Task 2.3).",
                      "children": {
                        "__tests__": {
                          "type": "directory",
                          "description": "A directory created within the job workspace to hold the generated test files. (Derived from critique in Task 2.3, Step 3).",
                          "children": {
                            "<ModuleName>.test.ts": {
                              "type": "file",
                              "description": "The generated unit test file for the module, written by the Job worker process based on the IMG response. It is a primary artifact to be validated. (Derived from Task 2.12, Step 9)."
                            }
                          }
                        },
                        "<ModuleName>.ts": {
                          "type": "file",
                          "description": "The generated implementation file for the module, written by the Job worker process based on the IMG response. It is a primary artifact to be validated. (Derived from Task 2.12, Step 8)."
                        }
                      }
                    }
                  }
                },
                "prompt.txt": {
                  "type": "file",
                  "description": "The fully constructed prompt for the IMG, generated by the Task Runner and read by the Job worker. (Derived from Task 2.4)."
                },
                "prompt.hash": {
                  "type": "file",
                  "description": "The SHA-256 hash of `prompt.txt`, used by the Job worker to verify integrity. (Derived from Task 2.4)."
                },
                "failures.json": {
                  "type": "file",
                  "description": "An intermediate report, created and appended to by the Job worker, that logs each validation failure within the retry loop. (Derived from Task 2.8)."
                },
                "final_failure.json": {
                  "type": "file",
                  "description": "The final, structured report for a permanently failed Job, written by the Job worker on the last failed attempt. (Derived from Task 2.8)."
                },
                "system_context.json": {
                  "type": "file",
                  "description": "A symlink to the main repository's `system_context.json` file. (Derived from Task 2.3)."
                },
                "validation_dsl_spec.md": {
                  "type": "file",
                  "description": "A symlink to the main repository's `validation_dsl_spec.md` file. (Derived from Task 2.3)."
                },
                "tsconfig.validation.json": {
                  "type": "file",
                  "description": "A temporary TypeScript configuration file dynamically generated by the `tscValidator` engine. It is used to run `tsc` with specific validation-focused settings within the isolated job workspace and is deleted after use. (Derived from Task 2.9, Step 2)."
                }
              }
            }
          }
        }
      }
    },
    ".ironclad_failures.json": {
      "type": "file",
      "description": "The final aggregated report of all module generation failures for a run."
    },
    "ARCHITECTURE_SPEC.md": {
      "type": "file",
      "description": "The primary input file defining the overall system structure and modules."
    },
    "system_context.json": {
      "type": "file",
      "description": "Provides global context to the IMG for all modules."
    },
    "validation_dsl_spec.md": {
      "type": "file",
      "description": "Defines custom validation rules that generated code must satisfy."
    },
    "dist": {
      "type": "directory",
      "description": "Contains compiled JavaScript output from the 'src' directory, as configured in tsconfig.json."
    },
    ".env": {
      "type": "file",
      "description": "Stores local environment variables, such as the IMG API key. This file is ignored by Git to protect secrets."
    },
    ".gitignore": {
      "type": "file",
      "description": "Specifies intentionally untracked files to be ignored by Git, such as node_modules, build artifacts, and environment files."
    },
    "*.log": {
      "type": "file",
      "description": "A pattern for log files generated during runtime or development, which should be ignored by version control."
    },
    "package.json": {
      "type": "file",
      "description": "The Node.js project manifest file, defining dependencies, scripts, and the executable 'bin' entry for the CLI."
    },
    "tsconfig.json": {
      "type": "file",
      "description": "Configuration file for the TypeScript compiler (tsc), defining compilation options, target version, and file paths."
    },
    "__tests__": {
      "type": "directory",
      "description": "A new top-level directory for project-level tests and test fixtures, separate from generated module tests.",
      "children": {
        "fixtures": {
          "type": "directory",
          "description": "Contains static data files used as input for tests.",
          "children": {
            "contracts": {
              "type": "directory",
              "description": "Contains example ModuleContract JSON files for testing the validator.",
              "children": {
                "validContract.json": {
                  "type": "file",
                  "description": "An example of a valid ModuleContract file that conforms to the schema."
                },
                "invalidContract.json": {
                  "type": "file",
                  "description": "An example of an invalid ModuleContract file that violates the schema."
                }
              }
            },
            "specs": {
              "type": "directory",
              "description": "Contains static `ARCHITECTURE_SPEC.md` fixture files for testing the Markdown parser.",
              "children": {
                "valid-spec.md": {
                  "type": "file",
                  "description": "An example of a valid specification file with a 'Modules' section."
                },
                "no-modules-section.md": {
                  "type": "file",
                  "description": "An example spec file that is missing the required 'Modules' section."
                },
                "empty-list.md": {
                  "type": "file",
                  "description": "An example spec file where the 'Modules' section exists but has no items."
                }
              }
            }
          }
        },
        "mocks": {
          "type": "directory",
          "description": "A new directory to contain mock servers and other complex test utilities.",
          "children": {
            "img-server.ts": {
              "type": "file",
              "description": "A mock IMG server (e.g., using Express or a similar library) for use in automated end-to-end tests of the full generation pipeline, isolating tests from the real external API. (Derived from Task 2.19)."
            }
          }
        }
      }
    },
    "test-data": {
      "type": "directory",
      "description": "A temporary directory for test fixtures, as proposed in Tasks 1.4 and 1.5. Note: This conflicts with the constitution's established `__tests__/fixtures` directory.",
      "children": {
        "contracts": {
          "type": "directory",
          "description": "Contains contract files for testing the JSON parser.",
          "children": {
            "valid-contract.json": {
              "type": "file",
              "description": "A valid contract file for testing successful parsing."
            },
            "invalid-syntax.json": {
              "type": "file",
              "description": "A contract file with a JSON syntax error for testing error handling."
            },
            "invalid-schema.json": {
              "type": "file",
              "description": "A contract file with a schema validation error for testing error handling."
            }
          }
        },
        "specs": {
          "type": "directory",
          "description": "Contains architecture specification files for testing the Markdown parser.",
          "children": {
            "valid-spec.md": {
              "type": "file",
              "description": "A valid spec file for testing successful parsing of the module list."
            },
            "no-modules-section.md": {
              "type": "file",
              "description": "A spec file missing the 'Modules' section for testing error/edge cases."
            },
            "empty-list.md": {
              "type": "file",
              "description": "A spec file with an empty 'Modules' list for testing edge cases."
            }
          }
        }
      }
    },
    "jest.config.js": {
      "type": "file",
      "description": "The configuration file for the Jest testing framework, introduced in Task 1.11 to define presets like `ts-jest` and the test environment."
    }
  }
}